{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaina\\\\OneDrive\\\\Desktop\\\\RIP\\\\rbl\\\\src\\\\components\\\\SpiritualMusicPlayer.js\",\n  _s = $RefreshSig$();\n// Previous imports remain the same...\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Pause, SkipBack, SkipForward, Search, Music } from 'lucide-react';\n\n// Updated bhajans database with proper URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bhajansDatabase = [{\n  id: 1,\n  title: \"ॐ जय जगदीश हरे\",\n  artist: \"Traditional\",\n  audioUrl: \"/audio/song1.mp3\",\n  // Update with your actual path\n  duration: 300,\n  lyrics: [\"ॐ जय जगदीश हरे\", \"स्वामी जय जगदीश हरे\", \"भक्त जनों के संकट, दास जनों के संकट\", \"क्षण में दूर करे॥\"]\n}, {\n  id: 2,\n  title: \"हनुमान चालीसा\",\n  artist: \"Traditional\",\n  audioUrl: \"/audio/song2.mp3\",\n  // Update with your actual path\n  duration: 480,\n  lyrics: [\"श्री गुरु चरण सरोज रज\", \"निज मनु मुकुरु सुधारि\", \"बरनऊं रघुबर बिमल जसु\", \"जो दायकु फल चारि\"]\n}, {\n  id: 3,\n  title: \"गायत्री मंत्र\",\n  artist: \"Traditional\",\n  audioUrl: \"/audio/song3.mp3\",\n  // Update with your actual path\n  duration: 240,\n  lyrics: [\"ॐ भूर्भुवः स्वः\", \"तत्सवितुर्वरेण्यं\", \"भर्गो देवस्य धीमहि\", \"धियो यो नः प्रचोदयात्\"]\n}];\nconst SpiritualMusicPlayer = () => {\n  _s();\n  // Previous state declarations remain the same...\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [songs, setSongs] = useState(bhajansDatabase);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentLyricIndex, setCurrentLyricIndex] = useState(0);\n  const [error, setError] = useState(null);\n  const audioRef = useRef(null);\n  const currentSong = songs[currentSongIndex];\n\n  // Initialize audio on mount with error handling\n  useEffect(() => {\n    if (!audioRef.current) {\n      audioRef.current = new Audio();\n    }\n    const audio = audioRef.current;\n\n    // Reset error state when changing songs\n    setError(null);\n\n    // Set up error handling\n    const handleError = e => {\n      console.error('Audio error:', e);\n      setError('Unable to play this song. Please try another.');\n      setIsPlaying(false);\n    };\n\n    // Set up ended event handler\n    const handleEnded = () => {\n      setIsPlaying(false);\n      handleNext();\n    };\n\n    // Add event listeners\n    audio.addEventListener('error', handleError);\n    audio.addEventListener('ended', handleEnded);\n\n    // Set initial source\n    audio.src = currentSong.audioUrl;\n    audio.load();\n\n    // Cleanup\n    return () => {\n      audio.removeEventListener('error', handleError);\n      audio.removeEventListener('ended', handleEnded);\n      audio.pause();\n    };\n  }, []);\n\n  // Handle song change with error handling\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    // Reset error state\n    setError(null);\n\n    // Store current play state\n    const wasPlaying = !audio.paused;\n\n    // Update source and load\n    audio.src = currentSong.audioUrl;\n    audio.load();\n\n    // Attempt to play if it was playing before\n    if (wasPlaying) {\n      audio.play().catch(error => {\n        console.error(\"Playback failed:\", error);\n        setError('Unable to play this song. Please try another.');\n        setIsPlaying(false);\n      });\n    } else {\n      setIsPlaying(false);\n    }\n    setCurrentTime(0);\n    setCurrentLyricIndex(0);\n  }, [currentSongIndex, currentSong]);\n\n  // Handle play/pause with error handling\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.play().catch(error => {\n        console.error(\"Playback failed:\", error);\n        setError('Unable to play this song. Please try another.');\n        setIsPlaying(false);\n      });\n    } else {\n      audio.pause();\n    }\n  }, [isPlaying]);\n\n  // Rest of your component remains the same...\n  // Just add error display in the return statement, right after the song info:\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto p-6 bg-blue-50 min-h-screen\",\n    children: error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"block sm:inline\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiritualMusicPlayer, \"KAiSMoSfhape1PIvWZgIcsDdtfA=\");\n_c = SpiritualMusicPlayer;\nexport default SpiritualMusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"SpiritualMusicPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Play","Pause","SkipBack","SkipForward","Search","Music","jsxDEV","_jsxDEV","bhajansDatabase","id","title","artist","audioUrl","duration","lyrics","SpiritualMusicPlayer","_s","isPlaying","setIsPlaying","currentTime","setCurrentTime","songs","setSongs","currentSongIndex","setCurrentSongIndex","searchQuery","setSearchQuery","currentLyricIndex","setCurrentLyricIndex","error","setError","audioRef","currentSong","current","Audio","audio","handleError","e","console","handleEnded","handleNext","addEventListener","src","load","removeEventListener","pause","wasPlaying","paused","play","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jaina/OneDrive/Desktop/RIP/rbl/src/components/SpiritualMusicPlayer.js"],"sourcesContent":["// Previous imports remain the same...\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Play, Pause, SkipBack, SkipForward, Search, Music } from 'lucide-react';\r\n\r\n// Updated bhajans database with proper URLs\r\nconst bhajansDatabase = [\r\n  {\r\n    id: 1,\r\n    title: \"ॐ जय जगदीश हरे\",\r\n    artist: \"Traditional\",\r\n    audioUrl: \"/audio/song1.mp3\", // Update with your actual path\r\n    duration: 300,\r\n    lyrics: [\r\n      \"ॐ जय जगदीश हरे\",\r\n      \"स्वामी जय जगदीश हरे\",\r\n      \"भक्त जनों के संकट, दास जनों के संकट\",\r\n      \"क्षण में दूर करे॥\",\r\n    ]\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"हनुमान चालीसा\",\r\n    artist: \"Traditional\",\r\n    audioUrl: \"/audio/song2.mp3\", // Update with your actual path\r\n    duration: 480,\r\n    lyrics: [\r\n      \"श्री गुरु चरण सरोज रज\",\r\n      \"निज मनु मुकुरु सुधारि\",\r\n      \"बरनऊं रघुबर बिमल जसु\",\r\n      \"जो दायकु फल चारि\"\r\n    ]\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"गायत्री मंत्र\",\r\n    artist: \"Traditional\",\r\n    audioUrl: \"/audio/song3.mp3\", // Update with your actual path\r\n    duration: 240,\r\n    lyrics: [\r\n      \"ॐ भूर्भुवः स्वः\",\r\n      \"तत्सवितुर्वरेण्यं\",\r\n      \"भर्गो देवस्य धीमहि\",\r\n      \"धियो यो नः प्रचोदयात्\"\r\n    ]\r\n  }\r\n];\r\n\r\nconst SpiritualMusicPlayer = () => {\r\n  // Previous state declarations remain the same...\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [songs, setSongs] = useState(bhajansDatabase);\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [currentLyricIndex, setCurrentLyricIndex] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const audioRef = useRef(null);\r\n  const currentSong = songs[currentSongIndex];\r\n\r\n  // Initialize audio on mount with error handling\r\n  useEffect(() => {\r\n    if (!audioRef.current) {\r\n      audioRef.current = new Audio();\r\n    }\r\n\r\n    const audio = audioRef.current;\r\n    \r\n    // Reset error state when changing songs\r\n    setError(null);\r\n    \r\n    // Set up error handling\r\n    const handleError = (e) => {\r\n      console.error('Audio error:', e);\r\n      setError('Unable to play this song. Please try another.');\r\n      setIsPlaying(false);\r\n    };\r\n\r\n    // Set up ended event handler\r\n    const handleEnded = () => {\r\n      setIsPlaying(false);\r\n      handleNext();\r\n    };\r\n\r\n    // Add event listeners\r\n    audio.addEventListener('error', handleError);\r\n    audio.addEventListener('ended', handleEnded);\r\n\r\n    // Set initial source\r\n    audio.src = currentSong.audioUrl;\r\n    audio.load();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      audio.removeEventListener('error', handleError);\r\n      audio.removeEventListener('ended', handleEnded);\r\n      audio.pause();\r\n    };\r\n  }, []);\r\n\r\n  // Handle song change with error handling\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n\r\n    // Reset error state\r\n    setError(null);\r\n\r\n    // Store current play state\r\n    const wasPlaying = !audio.paused;\r\n    \r\n    // Update source and load\r\n    audio.src = currentSong.audioUrl;\r\n    audio.load();\r\n    \r\n    // Attempt to play if it was playing before\r\n    if (wasPlaying) {\r\n      audio.play().catch(error => {\r\n        console.error(\"Playback failed:\", error);\r\n        setError('Unable to play this song. Please try another.');\r\n        setIsPlaying(false);\r\n      });\r\n    } else {\r\n      setIsPlaying(false);\r\n    }\r\n    \r\n    setCurrentTime(0);\r\n    setCurrentLyricIndex(0);\r\n  }, [currentSongIndex, currentSong]);\r\n\r\n  // Handle play/pause with error handling\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n\r\n    if (isPlaying) {\r\n      audio.play().catch(error => {\r\n        console.error(\"Playback failed:\", error);\r\n        setError('Unable to play this song. Please try another.');\r\n        setIsPlaying(false);\r\n      });\r\n    } else {\r\n      audio.pause();\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Rest of your component remains the same...\r\n  // Just add error display in the return statement, right after the song info:\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 bg-blue-50 min-h-screen\">\r\n      {/* Previous JSX remains the same... */}\r\n      \r\n      {/* Add error message display */}\r\n      {error && (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\r\n          <span className=\"block sm:inline\">{error}</span>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Rest of your JSX remains the same... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpiritualMusicPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}